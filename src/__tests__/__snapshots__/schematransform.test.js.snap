// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default schema transform 1`] = `
"type AdminData {
  creationDate: String
  requestButton: Boolean
}

type Cover {
  detail_117: String
  detail_207: String
  detail_42: String
  detail_500: String
  thumbnail: String
  detail: String
}

type Creator {
  functionCode: String!
  functionSingular: String!
  functionPlural: String!
  name: String!
  type: String!
  description: String!
  imageUrl: String
}

type DK5 {
  searchCode: String!
  searchString: String!
  value: String!
}

type Draft_Manifestation {
  title: Draft_WorkTitles!
  access: [Draft_Access!]!
}

type Draft_URL {
  origin: String!
  url: String!
}

type Draft_Ill {
  ill: Boolean!
}

type Draft_InfomediaService {
  id: String!
}

type Draft_DigitalArticleService {
  issn: String!
}

union Draft_Access = Draft_URL | Draft_Ill | Draft_InfomediaService | Draft_DigitalArticleService

type Draft_Work {
  manifestations: [Draft_Manifestation!]!
  reviews: [Draft_Review!]!
  title: Draft_WorkTitles!
  abstract: String
}

type Draft_Query {
  work(id: String, faust: String): Draft_Work
}

type Query {
  draft: Draft_Query!
  manifestation(pid: String!): WorkManifestation!
  work(id: String, faust: String): Work
  works(id: [String!], faust: [String!]): [Work]!
  search(q: SearchQuery!, filters: SearchFilters): SearchResponse!
  suggest(q: String!, worktype: WorkType, suggesttype: String): SuggestResponse!
  infomediaContent(pid: String!): [InfomediaContent]
  refWorks(pid: String!): String!
  ris(pid: String!): String!
}

union Draft_Review = Draft_ExternalReview | Draft_InfomediaReview | Draft_LibrariansReview

type Draft_ExternalReview {
  author: String
  date: String
  rating: String
  urls: [Draft_URL!]!
}

type Draft_InfomediaReview {
  author: String
  date: String
  origin: String
  rating: String
  id: String!
}

type Draft_LibrariansReview {
  author: String
  date: String
  sections: [TextWithWork!]!

  \\"\\"\\" This is a pid \\"\\"\\"
  id: String!
}

type Draft_WorkTitles {
  main: String!
  full: String!
  parallel: [String!]!
  sort: String!
  original: String
}

type InfomediaContent {
  id: String!
  headLine: String!
  subHeadLine: String!
  byLine: String!
  dateLine: String!
  paper: String!
  text: String!
  hedLine: String!
  logo: String!
  origin: String!
  html: String!
}

type Localizations {
  count: Int
  agencies: [holdingAgency]
}

type holdingAgency {
  agencyId: String
  holdingItems: [holdingsItem]
}

type holdingsItem {
  localizationPid: String
  codes: String
  localIdentifier: String
}

type UrlReference {
  url: String!
  origin: String!
  note: String!
  accessType: String
}

type InfomediaReference {
  infomediaId: String!
  pid: String!
  error: String
}

type WebArchive {
  type: String!
  url: String!
  pid: String!
}

type DigitalCopy {
  issn: String!
}

union OnlineAccess = UrlReference | InfomediaReference | WebArchive | DigitalCopy

input PeriodicaArticleOrder {
  \\"\\"\\"The pid of an article or periodica\\"\\"\\"
  pid: String!
  pickUpBranch: String!
  userName: String
  userMail: String
  publicationDateOfComponent: String
  volume: String
  authorOfComponent: String
  titleOfComponent: String
  pagination: String
}

enum PeriodicaArticleOrderStatus {
  OK
  ERROR_UNAUTHORIZED_USER
  ERROR_AGENCY_NOT_SUBSCRIBED
  ERROR_INVALID_PICKUP_BRANCH
  ERROR_PID_NOT_RESERVABLE
}

type PeriodicaArticleOrderResponse {
  status: PeriodicaArticleOrderStatus!
}

type Recommendation {
  work: Work!
  manifestation: WorkManifestation!
  reader: String
  value: Float
}

type ReviewInfomedia {
  author: String!
  date: String!
  media: String!
  rating: String!
  reference: [InfomediaReference]
}

type ReviewExternalMedia {
  author: String!
  date: String!
  media: String!
  rating: String!
  url: String!
  alternateUrl: String
}

type ReviewMatVurd {
  author: String!
  date: String!
  all: [TextWithWork!]!
  about: [TextWithWork!]!
  description: [TextWithWork!]!
  evaluation: [TextWithWork!]!
  other: [TextWithWork!]!
}

type TextWithWork {
  name: String! @deprecated(reason: \\"Use heading instead\\")
  heading: String!

  \\"\\"\\"A piece of text mentioning a work at the end.\\"\\"\\"
  text: String!

  \\"\\"\\"
  The work the text is refering to. When work is null, the text does not refer to a work.
  \\"\\"\\"
  work: Work
}

union Review = ReviewInfomedia | ReviewExternalMedia | ReviewMatVurd

type Mutation {
  submitPeriodicaArticleOrder(input: PeriodicaArticleOrder!): PeriodicaArticleOrderResponse!
}

\\"\\"\\"An integer in the range from 1 to 100\\"\\"\\"
scalar PaginationLimit

\\"\\"\\"
Using dayjs to format dates and support localization. https://day.js.org/docs/en/display/format
\\"\\"\\"
scalar CustomDateFormat

\\"\\"\\"The supported fields to query\\"\\"\\"
input SearchQuery {
  \\"\\"\\"
  Search for title, creator, subject or a combination.
  This is typically used where a single search box is desired.
  \\"\\"\\"
  all: String

  \\"\\"\\"Search for creator\\"\\"\\"
  creator: String

  \\"\\"\\"Search for specific subject\\"\\"\\"
  subject: String

  \\"\\"\\"Search for specific title\\"\\"\\"
  title: String
}

\\"\\"\\"The supported facet fields\\"\\"\\"
enum FacetField {
  workType
  language
  materialType
  fictiveCharacter
  genre
  audience
  accessType
  fictionNonfiction
  subject
  creator
}

\\"\\"\\"Search Filters\\"\\"\\"
input SearchFilters {
  accessType: [String!]
  audience: [String!]
  creator: [String!]
  fictionNonfiction: [String!]
  fictiveCharacter: [String!]
  genre: [String!]
  language: [String!]
  materialType: [String!]
  subject: [String!]
  workType: [String!]
}

\\"\\"\\"A facet value consists of a term and a count.\\"\\"\\"
type FacetValue {
  \\"\\"\\"Use the key when applying filters\\"\\"\\"
  key: String!

  \\"\\"\\"A value of a facet field\\"\\"\\"
  term: String!

  \\"\\"\\"The count of the term for a facet field\\"\\"\\"
  count: Int
}

\\"\\"\\"The result for a specific facet\\"\\"\\"
type FacetResult {
  \\"\\"\\"The name of the facet.\\"\\"\\"
  name: String!

  \\"\\"\\"The values of thie facet result\\"\\"\\"
  values(limit: Int!): [FacetValue!]!
}

\\"\\"\\"The simple search response\\"\\"\\"
type SearchResponse {
  \\"\\"\\"Total number of works found. May be used for pagination.\\"\\"\\"
  hitcount: Int!

  \\"\\"\\"
  The works matching the given search query. Use offset and limit for pagination.
  \\"\\"\\"
  works(offset: Int!, limit: PaginationLimit!): [Work!]!

  \\"\\"\\"
  Make sure only to fetch this when needed
  This may take seconds to complete
  \\"\\"\\"
  facets(facets: [FacetField!]!): [FacetResult!]!
}

type Series {
  part: String
  title: String
  works: [Work!]!
}

type Subject {
  type: String
  value: String!
}

union SuggestRow = Creator | Subject | Work

type SuggestResponse {
  result: [SuggestRow!]!
}

enum WorkType {
  analysis
  article
  bookdescription
  game
  literature
  map
  movie
  music
  none
  periodica
  portrait
  review
  sheetmusic
  track
}

type MaterialType {
  materialType: String!
  cover: Cover!
  localizations: Localizations
  manifestations: [WorkManifestation!]!
}

type Work {
  title: String
  fullTitle: String
  description: String
  creators: [Creator!]!
  cover: Cover!
  id: String!
  manifestations: [WorkManifestation!]!
  materialTypes: [MaterialType!]!
  path: [String!]!
  reviews: [Review!]!
  series: Series
  subjects: [Subject!]!
  workTypes: [WorkType!]!
}

type HostPublication {
  title: String!
  details: String!
}

type WorkManifestation {
  content: [String!]
  cover: Cover!
  creators: [Creator!]!
  datePublished(locale: String, format: String): CustomDateFormat!
  description: String!
  dk5: [DK5!]!
  edition: String!
  fullTitle: String!

  \\"\\"\\"
  Where this manifestation is published. For instance, in which magazine an article is published.
  \\"\\"\\"
  hostPublication: HostPublication
  hostPublicationPid: String
  isbn: String
  language: [String!]!
  materialType: String!
  notes: [String!]!
  onlineAccess: [OnlineAccess!]!
  originals: [String!]!
  originalTitle: String
  physicalDescription: String!
  pid: String!
  publisher: [String!]!
  shelf: String
  title: String
  recommendations(limit: Int): [Recommendation]!
  admin: AdminData
  inLanguage: String
  usedLanguage: [String]
  physicalDescriptionArticles: String
  volume: String
}
"
`;

exports[`limited access to root fields 1`] = `
"type Query {
  help(q: String!, language: LanguageCode): HelpResponse
}

type HelpRow {
  nid: Int!
  group: String!
  orgTitle: String!
  title: String!
  body: String!
}

type HelpResponse {
  result: [HelpRow!]!
}

enum LanguageCode {
  da
  en
}
"
`;

exports[`remove all fields by type 1`] = `
"type AdminData {
  creationDate: String
  requestButton: Boolean
}

type Availability {
  willLend: Boolean
  expectedDelivery: String
  orderPossible: Boolean
  orderPossibleReason: String
}

enum OrderPossibleReason {
  OWNED_ACCEPTED
  NOT_OWNED_ILL_LOC
  OWNED_WRONG_MEDIUMTYPE
  NOT_OWNED_WRONG_ILL_MEDIUMTYPE
  NOT_OWNED_NO_ILL_LOC
  OWNED_OWN_CATALOGUE
  NOT_OWNED_ACCEPTED_BY_CONSORTIA
}

type CheckOrderPolicy {
  lookUpUrl: String
  orderPossible: Boolean
  orderPossibleReason: OrderPossibleReason
}

type Creator {
  functionCode: String!
  functionSingular: String!
  functionPlural: String!
  name: String!
  type: String!
  description: String!
  imageUrl: String
}

type DK5 {
  searchCode: String!
  searchString: String!
  value: String!
}

type Query {
  manifestation(pid: String!): WorkManifestation!
}

type Localizations {
  count: Int
  agencies: [holdingAgency]
}

type holdingAgency {
  agencyId: String
  holdingItems: [holdingsItem]
}

type holdingsItem {
  localizationPid: String
  codes: String
  localIdentifier: String
}

type UrlReference {
  url: String!
  origin: String!
  note: String!
  accessType: String
}

type InfomediaReference {
  infomediaId: String!
  pid: String!
  error: String
}

type WebArchive {
  type: String!
  url: String!
  pid: String!
}

type DigitalCopy {
  issn: String!
}

union OnlineAccess = UrlReference | InfomediaReference | WebArchive | DigitalCopy

type Recommendation {
  work: Work!
  manifestation: WorkManifestation!
  reader: String
  value: Float
}

type ReviewInfomedia {
  author: String!
  date: String!
  media: String!
  rating: String!
  reference: [InfomediaReference]
}

type ReviewExternalMedia {
  author: String!
  date: String!
  media: String!
  rating: String!
  url: String!
  alternateUrl: String
}

type ReviewMatVurd {
  author: String!
  date: String!
  all: [TextWithWork!]!
  about: [TextWithWork!]!
  description: [TextWithWork!]!
  evaluation: [TextWithWork!]!
  other: [TextWithWork!]!
}

type TextWithWork {
  name: String! @deprecated(reason: \\"Use heading instead\\")
  heading: String!

  \\"\\"\\"A piece of text mentioning a work at the end.\\"\\"\\"
  text: String!

  \\"\\"\\"
  The work the text is refering to. When work is null, the text does not refer to a work.
  \\"\\"\\"
  work: Work
}

union Review = ReviewInfomedia | ReviewExternalMedia | ReviewMatVurd

\\"\\"\\"
Using dayjs to format dates and support localization. https://day.js.org/docs/en/display/format
\\"\\"\\"
scalar CustomDateFormat

type SEO {
  title: String!
  description: String!
}

type Series {
  part: String
  title: String
  works: [Work!]!
}

type Subject {
  type: String
  value: String!
}

enum WorkType {
  analysis
  article
  bookdescription
  game
  literature
  map
  movie
  music
  none
  periodica
  portrait
  review
  sheetmusic
  track
}

type MaterialType {
  materialType: String!
  localizations: Localizations
  manifestations: [WorkManifestation!]!
}

type Work {
  title: String
  fullTitle: String
  description: String
  creators: [Creator!]!
  id: String!
  manifestations: [WorkManifestation!]!
  materialTypes: [MaterialType!]!
  path: [String!]!
  reviews: [Review!]!
  series: Series
  seo: SEO!
  subjects: [Subject!]!
  workTypes: [WorkType!]!
}

type HostPublication {
  title: String!
  details: String!
}

type WorkManifestation {
  content: [String!]
  creators: [Creator!]!
  datePublished(locale: String, format: String): CustomDateFormat!
  description: String!
  dk5: [DK5!]!
  edition: String!
  fullTitle: String!

  \\"\\"\\"
  Where this manifestation is published. For instance, in which magazine an article is published.
  \\"\\"\\"
  hostPublication: HostPublication
  hostPublicationPid: String
  isbn: String
  language: [String!]!
  materialType: String!
  notes: [String!]!
  onlineAccess: [OnlineAccess!]!
  originals: [String!]!
  originalTitle: String
  physicalDescription: String!
  pid: String!
  publisher: [String!]!
  shelf: String
  title: String
  recommendations(limit: Int): [Recommendation]!
  availability: Availability
  checkorder(pickupBranch: String!): CheckOrderPolicy
  admin: AdminData
  inLanguage: String
  usedLanguage: [String]
  physicalDescriptionArticles: String
  volume: String
}
"
`;
